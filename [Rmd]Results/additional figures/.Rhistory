CairoPDF(file="./figure/SupFigure2",
width=width_fig, height=height_fig)
print(p)
dev.off()
config$label_x = ''
config$label_y = 'number of PD events'
config$label_x = ''
config$label_y = 'number of PD events'
p = ggplot(data_anovaPD,aes(x=numOfSwitch, y=data_y, group=interaction(exp,data_x)))+
# geom_point()+
geom_boxplot(aes(x=numOfSwitch,group=interaction(numOfSwitch,data_x)))+
facet_grid(data_x~exp)
config$ylim = round(seq(0,1,0.25),2)
config$ylim_stride = 0.02
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p
config$label_x = ''
config$label_y = 'number of PD events'
p = ggplot(data_anovaPD,aes(x=numOfSwitch, y=data_y, group=interaction(exp,data_x)))+
xlab(config$label_x) +
ylab(config$label_y)+
geom_boxplot(aes(x=numOfSwitch,group=interaction(numOfSwitch,data_x)))+
facet_grid(data_x~exp)
p
g2 = c('unswitch','switch')
countFigNum = 1
mmFlg = FALSE
auFlg = FALSE
#### data loading ------------------------------------------------------------
if(mmFlg){
data=fromJSON(file="../../[Python]PreProcessing/Exp1/data/PDPCevents_mm.json")
}else if(auFlg){
data=fromJSON(file="../../[Python]PreProcessing/Exp1/data/PDPCevents_au.json")
}else{
data=fromJSON(file="../../[Python]PreProcessing/Exp1/data/PDPCevents.json")
}
dat <- list(matrix(unlist(data$constriction),nrow=length(data$constriction),byrow=T),
matrix(unlist(data$dilation),nrow=length(data$dilation),byrow=T))
indices = NULL
events = NULL
sub = NULL
numOfSwitch = NULL
numOfTrial = NULL
baseline = NULL
for(i in 1:length(data$event)){
indices = rbind(indices, matrix(data[["indices"]][[i]])-4000 )
events = rbind(events, matrix(data[["event"]][[i]]))
sub = rbind(sub,matrix(rep(data$sub[i],length(data[["indices"]][[i]]))))
numOfSwitch = rbind(numOfSwitch,matrix(rep(data$numOfSwitch[i],length(data[["indices"]][[i]]))))
# baseline = rbind(baseline,matrix(rep(data$Baseline[i],length(data[["indices"]][[i]]))))
numOfTrial = rbind(numOfTrial,matrix(rep(data$numOfTrial[i],length(data[["indices"]][[i]]))))
}
# data$numOfTrial[i]
g1 = c('constriction','dilation')
g2 = c('0','1','2+')
# g2 = c('0','1')
g3 = c('unswitch','switch','switch')
ind_data_e1_raster = data.frame(
sub = sub,
numOfSwitch = numOfSwitch,
indices = indices,
events = g1[events+1],
numOfTrial = numOfTrial,
exp = 'Exp1'
)
ind_data_e1_raster[ind_data_e1_raster$numOfSwitch > length(g2)-2,]$numOfSwitch = length(g2)-1
ind_data_e1_raster$numOfSwitch = g2[ind_data_e1_raster$numOfSwitch+1]
ind_data_e1 = data.frame(
sub = rep(data$sub,2),
numOfSwitch = rep(data$numOfSwitch,2),
data_y_all = c(data$dilation_time,data$constriction_time),
# data_y_bef2s_0s = c(data$dilation_time_bef2s_0s,data$constriction_time_bef2s_0s),
# data_y_bef1s_0s = c(data$dilation_time_bef1s_0s,data$constriction_time_time_bef1s_0s),
# data_y_bef2s_1s = c(data$dilation_time_bef2s_1s,data$constriction_time_bef2s_1s),
events = rep(c('dilation','constriction'),times=c(length(data$sub),length(data$sub))),
baseline = data$Baseline,
exp = 'Exp1'
)
tmpD = matrix(unlist(data$dilation_time_each),nrow=length(data$dilation_time_each),byrow=T)
tmpC = matrix(unlist(data$constriction_time_each),nrow=length(data$constriction_time_each),byrow=T)
numOfTrial = dim(tmpD)[1]
lengthOfTime = dim(tmpD)[2]
ind_data_each_e1 <- data.frame(
sub =  rep( data$sub, times = rep( lengthOfTime, numOfTrial)),
data_y = c(t(matrix(t(tmpD),nrow=1)),t(matrix(t(tmpC),nrow=1))),
data_x = 1:9,
numOfTrial = rep( 1:numOfTrial, times = rep( lengthOfTime, numOfTrial)),
numOfSwitch =  rep( data$numOfSwitch, times = rep( lengthOfTime, numOfTrial)),
baseline =  rep( data$Baseline, times = rep( lengthOfTime, numOfTrial)),
events =  c(rep( rep('dilation',numOfTrial), times = rep( lengthOfTime, numOfTrial)),rep( rep('constriction',numOfTrial), times = rep( lengthOfTime, numOfTrial))),
exp = 'Exp1'
)
ind_data_e1[ind_data_e1$numOfSwitch > length(g2)-2,]$numOfSwitch = length(g2)-1
numOfSub_e1 = length(unique(ind_data_e1$sub))
#### Exp2
if(mmFlg){
data=fromJSON(file="../../[Python]PreProcessing/Exp2/data/PDPCevents_mm.json")
}else if(auFlg){
data=fromJSON(file="../../[Python]PreProcessing/Exp2/data/PDPCevents_au.json")
}else{
data=fromJSON(file="../../[Python]PreProcessing/Exp2/data/PDPCevents.json")
}
dat <- list(matrix(unlist(data$constriction),nrow=length(data$constriction),byrow=T),
matrix(unlist(data$dilation),nrow=length(data$dilation),byrow=T))
indices = NULL
events = NULL
sub = NULL
responses = NULL
numOfTrial = NULL
for(i in 1:length(data$event)){
if (length(data[["indices"]][[i]]) != 0){
indices = rbind(indices, matrix(data[["indices"]][[i]])-4000 )
events = rbind(events, matrix(data[["event"]][[i]]))
sub = rbind(sub,matrix(rep(data$sub[i],length(data[["indices"]][[i]]))))
responses = rbind(responses,matrix(rep(data$responses[i],length(data[["indices"]][[i]]))))
numOfTrial = rbind(numOfTrial,matrix(rep(data$numOfTrial[i],length(data[["indices"]][[i]]))))
}
}
ind_data_e2_raster = data.frame(
sub = sub,
numOfSwitch = responses,
indices = indices,
events = g1[events+1],
numOfTrial = numOfTrial,
exp = 'Exp2'
)
ind_data_e2 = data.frame(
sub = rep(data$sub,2),
numOfSwitch = rep(data$responses,2),
data_y_all = c(data$dilation_time,data$constriction_time),
# data_y_bef2s_0s = c(data$dilation_time_bef2s_0s,data$constriction_time_bef2s_0s),
# data_y_bef1s_0s = c(data$dilation_time_bef1s_0s,data$constriction_time_time_bef1s_0s),
# data_y_bef2s_1s = c(data$dilation_time_bef2s_1s,data$constriction_time_bef2s_1s),
events = rep(c('dilation','constriction'),times=c(length(data$sub),length(data$sub))),
baseline = data$Baseline,
exp = 'Exp2'
)
numOfSub_e2 = length(unique(ind_data_e2$sub))
tmpD = matrix(unlist(data$dilation_time_each),nrow=length(data$dilation_time_each),byrow=T)
tmpC = matrix(unlist(data$constriction_time_each),nrow=length(data$constriction_time_each),byrow=T)
numOfTrial = dim(tmpD)[1]
lengthOfTime = dim(tmpD)[2]
ind_data_each_e2 <- data.frame(
sub =  rep( data$sub, times = rep( lengthOfTime, numOfTrial)),
data_y = c(t(matrix(t(tmpD),nrow=1)),t(matrix(t(tmpC),nrow=1))),
data_x = 1:9,
numOfTrial = rep( 1:numOfTrial, times = rep( lengthOfTime, numOfTrial)),
numOfSwitch =  rep( data$responses, times = rep( lengthOfTime, numOfTrial)),
baseline =  rep( data$Baseline, times = rep( lengthOfTime, numOfTrial)),
events =  c(rep( rep('dilation',numOfTrial), times = rep( lengthOfTime, numOfTrial)),rep( rep('constriction',numOfTrial), times = rep( lengthOfTime, numOfTrial))),
exp = 'Exp2'
)
# ####### Figure 5A(raster) #####
ind_data_raster = rbind(ind_data_e1_raster,ind_data_e2_raster)
# Average -----------------------------------------------------------------
ind_data = rbind(ind_data_e1,ind_data_e2)
ind_data$numOfSwitch = g3[as.integer(ind_data$numOfSwitch)+1]
ind_data$numOfSwitch = factor(ind_data$numOfSwitch,c('unswitch','switch'))
ind_data_each = rbind(ind_data_each_e1,ind_data_each_e2)
ind_data_each$numOfSwitch = g3[as.integer(ind_data_each$numOfSwitch)+1]
ind_data_each$numOfSwitch = factor(ind_data_each$numOfSwitch,c('unswitch','switch'))
tmp = ind_data_each[ind_data_each$events == 'dilation',]
tmp = tmp[tmp$data_x > 2 & tmp$data_x < 5,]
g = c("","","-2 - -1s","-1 - 0s","0 - 1s","1 - 2s","2 - 3s","3 - 4s","4 - 5s")
tmp$data_x = g[tmp$data_x]
tmp$data_x = factor(tmp$data_x,levels = c("-2 - -1s","-1 - 0s","0 - 1s","1 - 2s","2 - 3s","3 - 4s","4 - 5s"))
data_anovaPD = aggregate( data_y ~ sub*numOfSwitch*data_x*numOfTrial*exp, data =tmp, FUN = "sum")
data_anovaPD = aggregate( data_y ~ sub*numOfSwitch*data_x*exp, data = data_anovaPD, FUN = "mean")
reject = NULL
for(iSub in unique(data_anovaPD$sub)){
if(dim(data_anovaPD[data_anovaPD$sub == iSub,])[1] != 8){
reject = rbind(reject,iSub)
}
}
for(iSub in reject){
data_anovaPD = data_anovaPD[data_anovaPD$sub != iSub,]
# data_anovaPC = data_anovaPC[data_anovaPC$sub != iSub,]
}
config$label_x = ''
config$label_y = 'number of PD events'
p = ggplot(data_anovaPD,aes(x=numOfSwitch, y=data_y, group=interaction(exp,data_x)))+
xlab(config$label_x) +
ylab(config$label_y)+
geom_boxplot(aes(x=numOfSwitch,group=interaction(numOfSwitch,data_x)))+
facet_grid(data_x~exp)
config$ylim = round(seq(0,1,0.25),2)
config$ylim_stride = 0.02
config$xlim = round(seq(1,2,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
tmp = data_anovaPD[data_anovaPD$data_x=="-2 - -1s",]
tmp$data_x = NULL
data_anovaPD = tmp
anovakun(data_anovaPD,"sAB",long=T, peta=T,gg=T)
event_PD_table = forDrawingSigANOVA
data_anovaPD$numOfSwitch = factor(data_anovaPD$numOfSwitch,levels = unique(data_anovaPD$numOfSwitch))
data_anovaPD$exp = factor(data_anovaPD$exp,levels = unique(data_anovaPD$exp))
data_anovaPD$sub = factor(data_anovaPD$sub,levels = unique(data_anovaPD$sub))
data_anovaPD_BF = anovaBF(data_y ~ numOfSwitch*exp + sub, data=data_anovaPD, whichRandom = "sub")
data_anovaPD_BF = round(exp(data_anovaPD_BF@bayesFactor[["bf"]]),3)
# # baseline PD corr. -----------------------------------------------------------------
# ind_data$data_y = ind_data$data_y_all
#
# data_anovaPD = aggregate( data_y ~ sub*numOfSwitch*exp, data = ind_data[ind_data$events == 'dilation',], FUN = "mean")
# data_anovaPC = aggregate( data_y ~ sub*numOfSwitch*exp, data = ind_data[ind_data$events == 'constriction',], FUN = "mean")
#
# reject = NULL
# for(iSub in unique(data_anovaPD$sub)){
#   if(dim(data_anovaPD[data_anovaPD$sub == iSub,])[1] != 4){
#     reject = rbind(reject,iSub)
#   }
# }
# for(iSub in reject){
#   data_anovaPD = data_anovaPD[data_anovaPD$sub != iSub,]
#   data_anovaPC = data_anovaPC[data_anovaPC$sub != iSub,]
# }
#
# anovakun(data_anovaPD,"sAB",long=T, peta=T,gg=T)
# anovakun(data_anovaPC,"sAB",long=T, peta=T,gg=T)
#
# p = dispBoxGraph(data_anovaPD,config,c("numOfSwitch","exp"))+
#   ggtitle("0 - 4s")+
#   facet_grid(. ~ exp )
#
# p = setEmptyStyle(p,config)
#
# eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
# countFigNum = countFigNum+1
#
# t = aggregate( baseline ~ sub*data_y, data =ind_data[ind_data$events == 'dilation',], FUN = "mean")
# t$numEvents = t$data_y
# t$numEvents = factor(t$numEvents,levels=unique(t$numEvents))
# t$data_y = t$baseline
# t$baseline = NULL
# t = t[,c(1,3,2)]
#
# anovakun(t,"sA",long=T, peta=T,gg=T)
#
# p = dispBoxGraph(t,config,c("numEvents"))
# config$ylim = round(seq(3.5,7.5,0.5),2)
# config$ylim_stride = 0.05
# config$xlim = round(seq(1,6,1),2)
# config$xlim_stride = 0.5
#
# p = setEmptyStyle(p,config)
# eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
# countFigNum = countFigNum+1
event_PD_table
View(event_PD_table)
data_anovaPD
event_PD_table
knitr::opts_chunk$set(echo = TRUE)
# tinytex::install_tinytex()
mmFlg = FALSE
auFlg = FALSE
if(mmFlg){
load("./data/Exp1/figure2_mm.rda")
}else if(auFlg){
load("./data/Exp1/figure2_au.rda")
}else{
load("./data/Exp1/figure2_norm.rda")
}
numOfsub = length(unique(data_res_tonic$sub))
#### Behavioral(# of trials) ####
ave_numOfTrial = aggregate( numOfTrial ~ numOfSwitch, data = data_numOfTrial, FUN = "mean")
ave_numOfTrial$numOfTrial = round(ave_numOfTrial$numOfTrial,2)
sd_numOfTrial = aggregate( numOfTrial ~ numOfSwitch, data = data_numOfTrial, FUN = "sd")
sd_numOfTrial$numOfTrial = round(sd_numOfTrial$numOfTrial,2)
anovakun(data_numOfTrial,"sA",long=T, peta=T,gg=T)
data_numOfTrial$numOfSwitch = factor(data_numOfTrial$numOfSwitch,levels = unique(data_numOfTrial$numOfSwitch))
data_numOfTrial$sub = factor(data_numOfTrial$sub,levels = unique(data_numOfTrial$sub))
numOfTrial_BF = anovaBF(numOfTrial ~ numOfSwitch + sub, data=data_numOfTrial, whichRandom = "sub",progress=FALSE)
numOfTrial_BF = round(exp(numOfTrial_BF@bayesFactor[["bf"]]),3)
numOfTrial_table = forDrawingSigANOVA
numOfTrial_post = forDrawingPost[["A"]][["bontab"]]
#### Behavioral(number of switch and jitter) ####
saveLoc = "../[Python]PreProcessing/Exp1/data/"
dat_jitter=fromJSON(file=paste(saveLoc,"numOfSwitch_jitter.json", sep = ""))
ind_jitter <- data.frame(
sub = unlist(dat_jitter$sub),
numOfSwitch = unlist(dat_jitter$numOfSwitch),
jitter = unlist(dat_jitter$taskTimeLen)
)
dat_jitter = aggregate( . ~ sub*numOfSwitch, data = ind_jitter, FUN = "mean")
anovakun(dat_jitter,"sA",long=T, peta=T,gg=T)
jitter_table_e1 = forDrawingSigANOVA
dat_jitter$numOfSwitch = factor(dat_jitter$numOfSwitch,levels = unique(dat_jitter$numOfSwitch))
dat_jitter$sub = factor(dat_jitter$sub,levels = unique(dat_jitter$sub))
dat_jitter_BF_e1 = anovaBF(jitter ~ numOfSwitch + sub, data=dat_jitter, whichRandom = "sub",progress=FALSE)
dat_jitter_BF_e1 = round(exp(dat_jitter_BF_e1@bayesFactor[["bf"]]),3)
#### Behavioral(RT) ####
anovakun(data_RT,"sA",long=T, peta=T,gg=T)
rt_sd = aggregate( RT ~ numOfSwitch, data = data_RT, FUN = "sd")
rt_ave = aggregate( RT ~ numOfSwitch, data = data_RT, FUN = "mean")
rt_sd$RT = round(rt_sd$RT,3)
rt_ave$RT = round(rt_ave$RT,3)
RT_table = forDrawingSigANOVA
data_RT$numOfSwitch = factor(data_RT$numOfSwitch,levels = unique(data_RT$numOfSwitch))
data_RT$sub = factor(data_RT$sub,levels = unique(data_RT$sub))
data_RT_BF = anovaBF(RT ~ numOfSwitch + sub, data=data_RT, whichRandom = "sub",progress=FALSE)
data_RT_BF = round(exp(data_RT_BF@bayesFactor[["bf"]]),3)
#### Figure 2A(average baseline pupil size) ####
data_res_tonic$data_y = data_res_tonic$Size
data_res_tonic$Size = NULL
anovakun(data_res_tonic,"sA",long=T, peta=T,gg=T)
data_res_tonic$numOfSwitch = factor(data_res_tonic$numOfSwitch,levels = unique(data_res_tonic$numOfSwitch))
data_res_tonic$sub = factor(data_res_tonic$sub,levels = unique(data_res_tonic$sub))
resultByesAnova = anovaBF(data_y ~ numOfSwitch + sub, data=data_res_tonic, whichRandom = "sub",progress=FALSE)
resultByesAnova = round(exp(resultByesAnova@bayesFactor[["bf"]]),3)
table_fig2 = forDrawingSigANOVA
# tVal_fig2 = forDrawingPost[["A"]][["bontab"]][["t"]]
# pVal_fig2 = forDrawingPost[["A"]][["bontab"]][["adj.p"]]
BP_e1_post = forDrawingPost[["A"]][["bontab"]]
x = data_res_tonic[data_res_tonic$numOfSwitch == "2+",]$data_y
y = data_res_tonic[data_res_tonic$numOfSwitch == "0",]$data_y
n = length(x)
sc = sqrt((n*(var(x))+n*(var(y)))/(n*2))
cohen_d0 = round(abs(mean(x)-mean(y))/sc,3)
bayesF = ttestBF(x = x, y = y, paired=TRUE)
bayesF_d0 = round(exp(bayesF@bayesFactor[["bf"]]),3)
x = data_res_tonic[data_res_tonic$numOfSwitch == "2+",]$data_y
y = data_res_tonic[data_res_tonic$numOfSwitch == "1",]$data_y
n = length(x)
sc = sqrt((n*(var(x))+n*(var(y)))/(n*2))
cohen_d1 = round(abs(mean(x)-mean(y))/sc,3)
bayesF = ttestBF(x = x, y = y, paired=TRUE)
bayesF_d1 = round(exp(bayesF@bayesFactor[["bf"]]),3)
#### Figure 2B (tertile) #####
if(mmFlg){
data = fromJSON(file="../[Python]PreProcessing/Exp1/data/data_tertile_mm.json")
}else if(auFlg){
data = fromJSON(file="../[Python]PreProcessing/Exp1/data/data_tertile_au.json")
}else{
# data = fromJSON(file="../[Python]PreProcessing/Exp1/data/data_tertile.json")
data = fromJSON(file="../[Python]PreProcessing/Exp2/data/data_tertile_norm.json")
}
data_tertile = data.frame(
sub = data$sub,
data_y = data$numOfSwitch_sorted,
Tertile = data$tertile
)
library(rjson)
library(ggplot2)
library(ggpubr)
library(Cairo)
library(gridExtra)
library(effsize)
library(BayesFactor)
library(rjson)
library(reshape)
library(lme4)
library(permutes)
sTime = -4
eTime = 5
analysisWin = 0
countFigNum=1
mmFlg = FALSE
auFlg = FALSE
saveLoc = "../../../[Python]PreProcessing/Exp2/data/"
f1 = "State"
g1 = c("unswitch","switch")
g2 = c("T1", "T2", "T3", "T4", "T5")
go1 = c("1", "2", "3", "4", "5")
go2 = c("switch", "unswitch")
go3 = c("0", "1", "2", "3", "4", "5")
## data loading ------------------------------------------------------------
if(mmFlg){
data=fromJSON(file=paste(saveLoc,"data_mm.json", sep = ""))
}else if(auFlg){
data=fromJSON(file=paste(saveLoc,"data_au.json", sep = ""))
}else{
data=fromJSON(file=paste(saveLoc,"data_norm.json", sep = ""))
}
dat <- list((matrix(unlist(data$PDR_baseline),nrow=length(data$PDR_baseline),byrow=T)),
(matrix(unlist(data$PDR),nrow=length(data$PDR),byrow=T)),
unlist(data$PDR_size_sorted),
unlist(data$PDR_size),
unlist(data$sub),
unlist(data$responses_sorted),
unlist(data$responses),
unlist(data$numOfTrial),
unlist(data$tertile),
unlist(data$RT))
dat_deriv = list(matrix(unlist(data$PDR),nrow=length(data$PDR),byrow=T))
names(dat) <- c('PDR_baseline','y', 'PDRsize_sorted', 'PDRsize', 'sub',
'responses_sorted', 'responses',
'numOfTrial','Tertile','RT')
numOfTrial = dim(dat$y)[1]
numOfSub = length(unique(dat$sub))
lengthOfTime = dim(dat$y)[2]
timeLen = c(sTime,eTime)
x = seq(sTime,eTime,length=lengthOfTime)
ind_RT <- data.frame(
sub = dat$sub,
Responses = dat$responses,
RT = dat$RT
)
data_RT = aggregate( RT ~ sub*Responses, data = ind_RT, FUN = "mean")
ind_data <- data.frame(
sub =  rep( dat$sub, times = rep( lengthOfTime, numOfTrial)),
data_y = t(matrix(t(dat$y),nrow=1)),
data_x = x,
Size = rep(dat$PDRsize, times = rep( lengthOfTime, numOfTrial)),
Size_sorted = rep(dat$PDRsize_sorted, times = rep( lengthOfTime, numOfTrial)),
# Tertile = rep( go1[dat$Tertile], times = rep( lengthOfTime, numOfTrial)),
Responses = rep( dat$responses, times = rep( lengthOfTime, numOfTrial)),
# Responses_sorted = rep( dat$responses_sorted, times = rep( lengthOfTime, numOfTrial)),
numOfTrial = rep( dat$numOfTrial, times = rep( lengthOfTime, numOfTrial)),
RT = rep( dat$RT, times = rep( lengthOfTime, numOfTrial))
)
data_timeCourse = data.frame(
sub =  rep( dat$sub, times = rep( lengthOfTime, numOfTrial)),
Baseline = t(matrix(t(dat$PDR_baseline),nrow=1)),
Transient = t(matrix(t(dat$y),nrow=1)),
data_x = x,
Responses = rep( dat$responses, times = rep( lengthOfTime, numOfTrial))
)
data_timeCourse = aggregate( . ~ sub*data_x*Responses, data = data_timeCourse, FUN = "mean")
# save(data_timeCourse,file = paste(saveLoc,"/dataset_timeCourse_e1.rda", sep = ""))
data_res_phasic = ind_data[ind_data$data_x > 0,]
# data_res_phasic$Tertile = NULL
# data_res_phasic$numOfTrial = NULL
data_corr = aggregate( data_y ~ sub*Responses*numOfTrial, data = data_res_phasic, FUN = "mean")
data_res_phasic = aggregate( data_y ~ sub*Responses, data = data_res_phasic, FUN = "mean")
# data_corr = aggregate( numOfTrial ~ sub*Responses, data = data_corr, FUN = "max")
#
# config = list(alpha = 0.4,
#               stride = 0.1,
#               label_x = "# of altanations",
#               label_y = "# of trials"
# )
# data_corr$data_y = data_corr$numOfTrial
# p = dispBarGraph(data_corr,config,c("Responses"))
# config$ylim = round(seq(0,50,10),2)
# config$ylim_stride = 2
# config$xlim = round(seq(0,1,1),2)
# config$xlim_stride = 0.5
#
# p = setEmptyStyle(p,config)
# p <- p + theme(
#   legend.position = 'none'
# )
#
# width_fig=3
# height_fig=5
# CairoFonts(regular = "Times","Times")
# CairoPDF(file="./numOftrials_e2",
#          width=width_fig, height=height_fig)
# print(p)
# dev.off()
data_res_tonic = ind_data
# data_res_tonic$Tertile = NULL
# data_res_phasic$numOfTrial = NULL
t = aggregate( Size ~ sub*Responses*numOfTrial, data = data_res_tonic, FUN = "mean")
data_corr$Size = t$Size
data_numOfTrial = aggregate( numOfTrial ~ sub*Responses, data = data_res_tonic, FUN = "max")
data_res_tonic = aggregate( Size ~ sub*Responses, data = data_res_tonic, FUN = "mean")
data_res_tonic$data_y = data_res_tonic$Size
data_res_tonic$Size = NULL
data_res = rbind(data_res_phasic,data_res_tonic)
data_res$type = rep(c("changes","size"),times=c(dim(data_res_phasic)[1],dim(data_res_tonic)[1]))
# tonic -------------------------------------------------------------------
# data_tonic = ind_data
# data_tonic = aggregate( Size_sorted ~ sub*Tertile, data = data_tonic, FUN = "mean")
#
# sd = aggregate( Size_sorted ~ Tertile, data = data_tonic, FUN = "sd")
# data_tonic = aggregate( Size_sorted ~ Tertile, data = ind_data, FUN = "mean")
#
# data_tonic$SE_min = data_tonic$Size_sorted - (sd$Size_sorted / sqrt(numOfSub))
# data_tonic$SE_max = data_tonic$Size_sorted + (sd$Size_sorted / sqrt(numOfSub))
# phasic ------------------------------------------------------------------
# data_phasic = ind_data
# data_phasic = data_phasic[data_phasic$data_x > analysisWin,]
#
# data_phasic = aggregate( data_y ~ sub*Tertile, data = data_phasic, FUN = "mean")
#
# sd = aggregate( data_y ~ Tertile, data = data_phasic, FUN = "sd")
# data_phasic = aggregate( data_y ~ Tertile, data = data_phasic, FUN = "mean")
#
# data_phasic$SE_min = data_phasic$data_y - (sd$data_y / sqrt(numOfSub))
# data_phasic$SE_max = data_phasic$data_y + (sd$data_y / sqrt(numOfSub))
# Tertile -----------------------------------------------------------------
# ind_data = data.frame(
#   Tertile = go1[dat$Tertile],
#   sub = dat$sub,
#   Responses_sorted = dat$responses_sorted,
#   Size_sorted = dat$PDRsize_sorted,
#   numOfTrial = dat$numOfTrial
# )
# tmp = aggregate( Responses_sorted ~ sub*Tertile, data = ind_data, FUN = "mean")
# x = as.numeric(tmp$Tertile)
# y = tmp$Responses_sorted
# val = cor.test(x,y)
# data_tertile = aggregate( . ~ sub*Tertile, data = ind_data, FUN = "mean")
# data_tertile$numOfTrial = NULL
if(mmFlg){
save(data_RT,data_res_phasic,data_res_tonic,
data_numOfTrial,data_res,data_corr,
file = "figure3_mm.rda")
}else if(auFlg){
save(data_RT,data_res_phasic,data_res_tonic,
data_numOfTrial,data_res,data_corr,
file = "figure3_au.rda")
}else{
save(data_RT,data_res_phasic,data_res_tonic,
data_numOfTrial,data_res,data_corr,
file = "figure3_norm.rda")
}
