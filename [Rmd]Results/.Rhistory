p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y)
p <- p + facet_grid(. ~ Pattern)
p = setFigureStyle(p)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
# ANOVA -------------------------------------------------------------------
anovakun(data_e1,"sAB",gg=T,long=T, peta=T)
output2wayANOVA(forDrawingSigANOVA)
p1
p2
p3
p1
View(data_e1_power)
config$ylim = round(seq(0,0.4,0.1),2)
config$ylim_stride = 0.02
config$xlim = round(seq(4,16,4),2)
config$xlim_stride = 1
p = setEmptyStyle(p,config)
p <- ggplot(data_e1_power, aes(x = data_x, y = data_y, colour = Pattern)) +
geom_line(aes(linetype = Pattern))+
xlim(c(4,16))+
ylim(c(0,0.35))+
scale_color_manual(values = c("black", "gray28") )+
xlab("Frequency[Hz]") + ylab("Evoked-Power[μV]")
config$ylim = round(seq(0,0.4,0.1),2)
config$ylim_stride = 0.02
config$xlim = round(seq(4,16,4),2)
config$xlim_stride = 1
p = setEmptyStyle(p,config)
p
config$ylim = round(seq(0,0.3,0.1),2)
config$ylim_stride = 0.02
config$xlim = round(seq(4,16,4),2)
config$xlim_stride = 1
p = setEmptyStyle(p,config)
p = setEmptyStyle(p,config)
p
View(setEmptyStyle)
round(seq(0,0.3,0.1),2)
p <- ggplot(data_e1_power, aes(x = data_x, y = data_y, colour = Pattern)) +
geom_line(aes(linetype = Pattern))+
xlim(c(4,16))+
ylim(c(0,0.35))+
scale_color_manual(values = c("black", "gray28") )+
xlab("Frequency[Hz]") + ylab("Evoked-Power[μV]")
config$ylim = round(seq(0,0.3,0.1),2)
config$ylim_stride = 0.02
config$xlim = round(seq(4,16,4),2)
config$xlim_stride = 1
p = setEmptyStyle(p,config)
p
p <- ggplot(data_e1_power, aes(x = data_x, y = data_y, colour = Pattern)) +
geom_line(aes(linetype = Pattern))+
xlim(c(4,16))+
# ylim(c(0,0.35))+
scale_color_manual(values = c("black", "gray28") )+
xlab("Frequency[Hz]") + ylab("Evoked-Power[μV]")
config$ylim = round(seq(0,0.3,0.1),2)
config$ylim_stride = 0.02
config$xlim = round(seq(4,16,4),2)
config$xlim_stride = 1
p = setEmptyStyle(p,config)
p
p <- ggplot(data_e1_power, aes(x = data_x, y = data_y, colour = Pattern)) +
geom_line(aes(linetype = Pattern))+
# xlim(c(4,16))+
# ylim(c(0,0.35))+
scale_color_manual(values = c("black", "gray28") )+
xlab("Frequency[Hz]") + ylab("Evoked-Power[μV]")
config$ylim = round(seq(0,0.3,0.1),2)
config$ylim_stride = 0.02
config$xlim = round(seq(4,16,4),2)
config$xlim_stride = 1
p = setEmptyStyle(p,config)
p
p <- dispLineGraph(data_e1, config, c("Luminance","Pattern"))
p
View(dispLineGraph)
View(dispLineGraph)
config$ylim = round(seq(0.8,1.4,0.2),2)
config$ylim_stride = 0.1
config$xlim =round(seq(0,5,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p
config$ylim = round(seq(0.8,1.4,0.2),2)
config$ylim_stride = 0.1
config$xlim =round(seq(1,5,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p
dat <- readMat("Rscript_data_analysis/matData/dat_mean_tf.mat")
sTime = 0.5
eTime = 3
dat_ft = data.frame(
data_x = rep(rep( seq(min(dat$toi), max(dat$toi), length=length(dat$toi)), length(dat$foi)),2),
data_y = rep(rep( seq(min(dat$foi), max(dat$foi), length=length(dat$foi)), times = rep(length(dat$toi),length(dat$foi))),2),
data_z = rbind(matrix( t(dat$y[,,5]), ncol = 1),matrix( t(dat$y[,,10]), ncol = 1))
)
dat_ft$Pattern = rep(c("Glare","Control"),times=c(length(dat_ft$data_x)/2,length(dat_ft$data_x)/2))
dat_ft = dat_ft[dat_ft$data_x > sTime,]
dat_ft = dat_ft[dat_ft$data_x < eTime,]
dat_ft = dat_ft[dat_ft$data_y > 5,]
dat_ft = dat_ft[dat_ft$data_y < 17,]
config <- list(lim_x = c(sTime, eTime),
lim_y = c(6,18),
alpha = 1,
stride = 1,
label_x = "Time [sec]",
label_y = "Freqency[Hz]"
)
p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y)
p <- p + facet_grid(. ~ Pattern)
p
config$ylim = round(seq(0,3,0.5),2)
config$ylim_stride = 0.2
config$xlim =round(seq(6,16,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p
p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y) +
facet_grid(. ~ Pattern)
p
config$xlim = round(seq(0,3,0.5),2)
config$xlim_stride = 0.2
config$ylim =round(seq(6,16,1),2)
config$ylim_stride = 0.5
p = setEmptyStyle(p,config)
p
round(seq(0,3,0.5),2)
p
View(dat_ft)
config$xlim = round(seq(0.5,3,0.5),2)
config$xlim_stride = 0.1
config$ylim =round(seq(6,16,1),2)
config$ylim_stride = 0.5
p = setEmptyStyle(p,config)
p
round(seq(0.5,3,0.5),2)
p
p = setEmptyStyle(p,config)+
scale_x_continuous(breaks=config$xlim)+
p =  scale_x_continuous(breaks=config$xlim)+
setEmptyStyle(p,config)
p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y) +
facet_grid(. ~ Pattern)
# p = setFigureStyle(p)
config$xlim = round(seq(0.5,3,0.5),2)
config$xlim_stride = 0.1
config$ylim =round(seq(6,16,1),2)
config$ylim_stride = 0.5
p =  scale_x_continuous(breaks=config$xlim)+
setEmptyStyle(p,config)
p =  p + scale_x_continuous(breaks=config$xlim)+
setEmptyStyle(p,config)
p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y) +
facet_grid(. ~ Pattern)
# p = setFigureStyle(p)
config$xlim = round(seq(0.5,3,0.5),2)
config$xlim_stride = 0.1
config$ylim =round(seq(6,16,1),2)
config$ylim_stride = 0.5
p =  p + scale_x_continuous(breaks=config$xlim)+
setEmptyStyle(p,config)
View(setEmptyStyle)
p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y) +
facet_grid(. ~ Pattern)
# p = setFigureStyle(p)
config$xlim = round(seq(0.5,3,0.5),2)
config$xlim_stride = 0.1
config$ylim =round(seq(6,16,1),2)
config$ylim_stride = 0.5
p
config$xlim
p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
# scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
# scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y) +
facet_grid(. ~ Pattern)
p
# p = setFigureStyle(p)
config$xlim = round(seq(0.5,3,0.5),2)
config$xlim_stride = 0.1
config$ylim =round(seq(6,16,1),2)
config$ylim_stride = 0.5
p = setEmptyStyle(p,config)
p
p = p + scale_x_continuous(breaks=config$xlim)
p
p = p + scale_x_continuous(breaks=config$xlim)
p = setEmptyStyle(p,config)
p
countFigNum = 1
#### file loading
load("data/dataset_e1e2.rda")
numOfSub = length(unique(data_e1$sub))
subName = NULL
# EEG power -------------------------------------------------------------
p <- ggplot(data_e1_power, aes(x = data_x, y = data_y, colour = Pattern)) +
geom_line(aes(linetype = Pattern))+
scale_color_manual(values = c("black", "gray28") )+
xlab("Frequency[Hz]") + ylab("Evoked-Power[μV]")
config$ylim = round(seq(0,0.3,0.1),2)
config$ylim_stride = 0.02
config$xlim = round(seq(4,16,4),2)
config$xlim_stride = 1
p = setEmptyStyle(p,config)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
# peak SSVEP amplitude ----------------------------------------------------
config <- list( label_x = "Contrast condition",
label_y = "Normalized SSVEP amplitude",
title="average",
grCol = c("black", "gray28", "gray54", "gray75", "gray88",
"#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"),
gr_outline = rep(c("black", "gray28", "gray54", "gray75", "gray88"),times=rep(2,5))
)
p <- dispLineGraph(data_e1, config, c("Luminance","Pattern"))
config$ylim = round(seq(0.8,1.4,0.2),2)
config$ylim_stride = 0.1
config$xlim =round(seq(1,5,1),2)
config$xlim_stride = 0.5
p = setEmptyStyle(p,config)
p <- p + theme(
legend.position = 'none'
)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
# Heatmap of the time frequency plot --------------------------------------
dat <- readMat("data/matData/dat_mean_tf.mat")
sTime = 0.5
eTime = 3
dat_ft = data.frame(
data_x = rep(rep( seq(min(dat$toi), max(dat$toi), length=length(dat$toi)), length(dat$foi)),2),
data_y = rep(rep( seq(min(dat$foi), max(dat$foi), length=length(dat$foi)), times = rep(length(dat$toi),length(dat$foi))),2),
data_z = rbind(matrix( t(dat$y[,,5]), ncol = 1),matrix( t(dat$y[,,10]), ncol = 1))
)
dat_ft$Pattern = rep(c("Glare","Control"),times=c(length(dat_ft$data_x)/2,length(dat_ft$data_x)/2))
dat_ft = dat_ft[dat_ft$data_x > sTime,]
dat_ft = dat_ft[dat_ft$data_x < eTime,]
dat_ft = dat_ft[dat_ft$data_y > 5,]
dat_ft = dat_ft[dat_ft$data_y < 17,]
config <- list(lim_x = c(sTime, eTime),
lim_y = c(6,18),
alpha = 1,
stride = 1,
label_x = "Time [sec]",
label_y = "Freqency[Hz]"
)
p <- ggplot(dat_ft,aes(x = data_x, y=data_y)) +
geom_tile(aes(fill = data_z)) +
scale_fill_distiller(palette = "Spectral") +
# scale_y_continuous(breaks = seq(config$lim_y[1],config$lim_y[2],config$stride),expand = c(0, 0)) +
# scale_x_continuous(breaks = seq(config$lim_x[1],config$lim_x[2],0.5),expand = c(0, 0)) +
xlab(config$label_x) + ylab(config$label_y) +
facet_grid(. ~ Pattern)
# p = setFigureStyle(p)
config$xlim = round(seq(0.5,3,0.5),2)
config$xlim_stride = 0.1
config$ylim =round(seq(6,16,1),2)
config$ylim_stride = 0.5
p = p + scale_x_continuous(breaks=config$xlim)
p = setEmptyStyle(p,config)
eval(parse(text=paste("p", countFigNum ,"=p", sep="")))
countFigNum = countFigNum+1
# ANOVA -------------------------------------------------------------------
anovakun(data_e1,"sAB",gg=T,long=T, peta=T)
# output2wayANOVA(forDrawingSigANOVA)
# # figure output -----------------------------------------------------------
# p = ggarrange(p1, p2, p3,
#               labels = c("B","C", "D"),
#               ncol = 1, nrow = 3)
# print(p)
#
# width_fig=6
# height_fig=4
#### Package instalation ####
library(rjson)
library(ggplot2)
library(ggpubr)
library(Cairo)
library(gridExtra)
library(effsize)
library(BayesFactor)
library(rjson)
library(reshape)
library(quickpsy)
if(exists(".anovakun.env")){
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
}else{
.anovakun.env <- new.env()
sys.source("./data/anovakun_485.R", envir = .anovakun.env)
attach(.anovakun.env)
}
subName = NULL
for( i in seq(30)){
if(i<10){subName = rbind(subName,paste("s0", i, sep = ""))}
else{subName = rbind(subName,paste("s", i, sep = ""))}
}
setEmptyStyle <- function(gData,config,size_font=20){
gData <- gData +theme(
panel.border = element_blank(),
axis.ticks.length=unit(.5, "cm"),
axis.ticks.x = element_line(colour = "black",size = 0.5),
# axis.line = element_line(),
axis.text.x = element_text(colour="black"),
axis.text.y = element_text(colour="black"),
panel.background = element_rect(fill = "transparent",size = 0.5),
panel.grid.major = element_line(colour = NA),
panel.grid.major.y = element_line(colour = "gray", size = 0.05),
panel.grid.major.x = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
axis.ticks = element_line(colour = "black",size = 0.5),
text = element_text(size = size_font,family = "Times"),
# text = element_text(size = size_font,family = "Source Han Sans JP ExtraLight"),
legend.title = element_text(size=(size_font/2)),
legend.text = element_text(size=(size_font/2)),
legend.key=element_rect(colour="transparent", fill=NA),
plot.background=element_rect(fill="transparent", colour=NA),
legend.background=element_rect(fill="transparent", colour=NA),
plot.title = element_text(size = size_font,hjust=-0.2)
)
gData = gData +
scale_y_continuous(breaks=config$ylim)+
# scale_x_continuous(breaks=config$xlim)+
coord_cartesian(xlim=c(config$xlim[1]-config$xlim_stride,rev(config$xlim)[1]+config$xlim_stride),
ylim=c(config$ylim[1]-config$ylim_stride,rev(config$ylim)[1]+config$ylim_stride),
expand=FALSE)+
annotate(x=config$xlim[1],xend=rev(config$xlim)[1],
y=config$ylim[1]-config$ylim_stride, yend=config$ylim[1]-config$ylim_stride,
colour="black", lwd=0.5, geom="segment")+
annotate(x=config$xlim[1]-config$xlim_stride, xend=config$xlim[1]-config$xlim_stride,
y=config$ylim[1], yend=rev(config$ylim)[1],
colour="black", lwd=0.5, geom="segment")+
theme(
axis.ticks = element_line(colour = "black",size = 0.5)
)
return(gData)
}
# Function definition
rejectOutlier <- function(ribbondata, vName){
eval(parse(text=paste("dat_mean = tapply(ribbondata$",vName,
",list(ribbondata$sub),mean)", sep="")))
eval(parse(text=paste("dat_sd = tapply(ribbondata$",vName,
",list(ribbondata$sub),sd)", sep="")))
numOfSub = unique(ribbondata$sub)
dat_mean = matrix(dat_mean,ncol = 1)
dat_mean = dat_mean[!is.na(dat_mean)]
dat_sd = matrix(dat_sd,ncol = 1)*3
dat_sd = dat_sd[!is.na(dat_sd)]
t=NULL
for(i in 1:length(numOfSub)){
t = rbind(t,dim(ribbondata[ribbondata$sub == numOfSub[i],])[1])
}
dat_mean = rep(dat_mean,times = t)
ribbondata$minsd = dat_mean - rep(dat_sd,times = t)
ribbondata$maxsd = dat_mean + rep(dat_sd,times = t)
eval(parse(text=paste("ribbondata = ribbondata[ribbondata$",vName,
"< ribbondata$maxsd,]", sep="")))
eval(parse(text=paste("ribbondata = ribbondata[ribbondata$",vName,
"> ribbondata$minsd,]", sep="")))
return(ribbondata)
}
combineGraphs <- function(graphNum,p,layout){
titleStr = c("'(a)'", "'(b)'", "'(c)'", "'(d)'", "'(e)'", "'(f)'", "'(g)'")
st = paste(p,graphNum, sep = "", collapse=",")
labelSt = titleStr[seq(1,length(graphNum))]
labelSt = paste(labelSt, collapse=",")
ncolNum = round(length(graphNum) / 2 )
if (is.numeric(layout)){
eval(parse(text=paste("p = grid.arrange(",
st ,",layout_matrix = layout)",
sep="")))
}else{
eval(parse(text=paste("p = ggarrange(",
st ,",labels = c(",
labelSt,
"),ncol = 2, nrow =", ncolNum, ")",
sep="")))
}
return(p)
}
dispBarGraph <- function(ribbondata, config, factors,numOfSub = 0){
if(numOfSub == 0) {numOfSub = length(unique(ribbondata$sub))}
if(length(factors) == 1){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'mean')", sep="")))
}
else if(length(factors) == 2){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'mean')", sep="")))
}else{
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'mean')", sep="")))
}
std_data$data_y = std_data$data_y / sqrt(numOfSub)
ribbondata$SE_min <- ribbondata$data_y - std_data$data_y
ribbondata$SE_max <- ribbondata$data_y + std_data$data_y
if(length(factors) == 1){
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],", y = data_y,color =",factors[1] ,",fill =",factors[1] ,"))", sep="")))
} else if(length(factors) == 2){
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],", y = data_y, color=",factors[2],",fill = ",factors[2],"))", sep="")))
} else{
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],", y = data_y, color = interaction(", factors[1],",",factors[2],",",factors[3],"),",
"fill = interaction(", factors[1],",",factors[2],",",factors[3],")","))", sep="")))
}
p <- p +
geom_bar(stat = "identity", position = "dodge")+
geom_errorbar(aes(ymin = SE_min, ymax = SE_max),
width = 0.3, size=0.2, position = position_dodge(.9)) +
geom_hline(yintercept=0, colour="black", linetype="solid", size = 0.5) +
ggtitle(config$title) +
xlab(config$label_x) + ylab(config$label_y) +
theme(
axis.ticks.x = element_blank(),
# axis.text.x = element_text(angle = 30, hjust = 1),
axis.line.x = element_blank()
)
if(!is.null(config$grCol)){
p=p+scale_fill_manual(values = config$grCol)+
scale_color_manual(values = config$gr_outline)
}
return(p)
}
dispLineGraph <- function(ribbondata, config, factors,numOfSub = 0){
if(numOfSub == 0) {numOfSub = length(unique(ribbondata$sub))}
if(length(factors) == 1){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1], ", data = ribbondata, FUN = 'mean')", sep="")))
}
else if(length(factors) == 2){
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2], ", data = ribbondata, FUN = 'mean')", sep="")))
}else{
eval(parse(text=paste("std_data = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'sd')", sep="")))
eval(parse(text=paste("ribbondata = aggregate( data_y ~ ",factors[1],"*",factors[2],"*",factors[3], ", data = ribbondata, FUN = 'mean')", sep="")))
}
std_data$data_y = std_data$data_y / sqrt(numOfSub)
ribbondata$SE_min <- ribbondata$data_y - std_data$data_y
ribbondata$SE_max <- ribbondata$data_y + std_data$data_y
# , color = ", factors[1],, color = ", factors[1],aes(shape = ", factors[2],"),
if(length(factors) == 1){
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],", y = data_y))", sep="")))
eval(parse(text=paste("p = p + geom_point(size = 3,color='black')", sep="")))
} else if(length(factors) == 2){
# , shape =  factors[2],
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[2],", y = data_y",
# ",group = interaction(",factors[1],",",factors[2],
"))", sep="")))
eval(parse(text=paste("p = p + geom_point(size = 3)", sep="")))
} else{
eval(parse(text=paste("p <- ggplot(ribbondata,aes(x = ", factors[1],", y = data_y, color = ", factors[1],", group = ",factors[2],"))", sep="")))
eval(parse(text=paste("p = p + geom_point(aes(shape = ", factors[2],"), size = 3)", sep="")))
}
if(!is.null(config$grCol)){
p = p + scale_color_manual(values = config$grCol)
}
if(!is.null(config$title)){
p = p + ggtitle(config$title)
}
p = p +
geom_errorbar(aes(ymin = SE_min, ymax = SE_max),size = 0.1, width = 0.1,color="black")+
xlab(config$label_x) + ylab(config$label_y) +
theme(
axis.ticks.x = element_blank(),
axis.line.x = element_blank()
)
return(p)
}
countFigNum = 1
#### file loading
load("data/dataset_e1e2.rda")
numOfSub = length(unique(data_e1$sub))
subName = NULL
# EEG power -------------------------------------------------------------
p <- ggplot(data_e1_power, aes(x = data_x, y = data_y, colour = Pattern)) +
geom_line(aes(linetype = Pattern))+
scale_color_manual(values = c("black", "gray28") )+
xlab("Frequency[Hz]") + ylab("Evoked-Power[μV]")
config$ylim = round(seq(0,0.3,0.1),2)
